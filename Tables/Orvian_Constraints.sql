-- Constraints Usuários

ALTER TABLE TB_USERS
ADD CONSTRAINT CK_USERS_ROLE
CHECK (ROLE IN ('USER', 'ATENDENTE', 'ADMIN'));
GO

ALTER TABLE TB_USERS 
ADD CONSTRAINT CK_BIRTHDATE 
CHECK (BIRTHDATE <= DATEADD(YEAR, -18, GETDATE()));
GO

ALTER TABLE TB_USERS 
ADD CONSTRAINT CK_PHONE_FORMAT 
CHECK (PHONE LIKE '([0-9][0-9]) [0-9][0-9][0-9][0-9][0-9]-[0-9][0-9][0-9][0-9]');
GO

ALTER TABLE TB_USERS 
ADD CONSTRAINT CK_EMAIL_FORMAT 
CHECK (EMAIL LIKE '%@%.com');
GO

ALTER TABLE TB_USERS 
ADD CONSTRAINT CK_DOCUMENT_FORMAT
CHECK ( 
        DOCUMENT LIKE '[0-9][0-9][0-9].[0-9][0-9][0-9].[0-9][0-9][0-9]-[0-9][0-9]' OR 
        DOCUMENT LIKE '[A-Z][A-Z][0-9][0-9][0-9][0-9][0-9][0-9]'
);
GO

ALTER TABLE TB_USERS
ADD CONSTRAINT UNIQUE_USERS_EMAIL
UNIQUE (EMAIL);
GO

ALTER TABLE TB_USERS
ADD CONSTRAINT UNIQUE_USERS_DOCUMENT
UNIQUE (DOCUMENT);
GO

ALTER TABLE TB_USERS
ADD CONSTRAINT UNIQUE_USERS_PHONE
UNIQUE (PHONE);
GO

-- Constraints Reserva

ALTER TABLE TB_RESERVATIONS 
	ADD CONSTRAINT CHK_RESERVATIONS_SITUATION 
	CHECK (SITUATION IN ('pendente', 'confirmada', 'cancelada'))
GO

ALTER TABLE TB_RESERVATIONS
    ADD CONSTRAINT CHK_RESERVATION_DATE_FUTURE
    CHECK (RESERVATION_DATE >= CONVERT(date, GETDATE()))
GO

ALTER TABLE TB_RESERVATIONS
    ADD CONSTRAINT CHK_CANCEL_DATE_FUTURE
    CHECK (CANCEL_DATE IS NULL OR CANCEL_DATE >= CONVERT(date, GETDATE()))
GO

ALTER TABLE TB_RESERVATIONS
ADD CONSTRAINT UQ_USER_PACKAGE_DATE UNIQUE (ID_USER, ID_PACKAGES_DATES)
GO

-- Constraints Pagamentos

ALTER TABLE TB_PAYMENTS
ADD CONSTRAINT CHK_PAYMENTS_STATUS CHECK (
        PAYMENT_STATUS IN ('aprovado', 'cancelado', 'pendente')
    );
GO
ALTER TABLE TB_PAYMENTS
ADD CONSTRAINT CHK_PAYMENTS_METHOD CHECK (
        PAYMENT_METHOD IN ('crédito', 'débito', 'boleto', 'pix')
    )
GO

ALTER TABLE TB_PAYMENTS
ADD CONSTRAINT CK_INSTALLMENT_TOTAL
CHECK (
    (INSTALLMENT_AMOUNT IS NULL OR INSTALLMENT IS NULL OR VALUE_PAID IS NULL)
    OR
    (INSTALLMENT_AMOUNT * INSTALLMENT <= VALUE_PAID)
)
GO

ALTER TABLE TB_PAYMENTS
ADD CONSTRAINT CK_VALUE_PAID_NON_NEGATIVE CHECK (VALUE_PAID >= 0);
GO

ALTER TABLE TB_PAYMENTS
ADD CONSTRAINT CK_TAX_NON_NEGATIVE CHECK (TAX IS NULL OR TAX >= 0);
GO

ALTER TABLE TB_PAYMENTS
ADD CONSTRAINT CK_DISCOUNT_NON_NEGATIVE CHECK (DISCOUNT IS NULL OR DISCOUNT >= 0);
GO

ALTER TABLE TB_PAYMENTS
ADD CONSTRAINT CK_INSTALLMENT_NON_NEGATIVE CHECK (INSTALLMENT IS NULL OR INSTALLMENT >= 0);
GO

ALTER TABLE TB_PAYMENTS
ADD CONSTRAINT CK_INSTALLMENT_AMOUNT_NON_NEGATIVE CHECK (INSTALLMENT_AMOUNT IS NULL OR INSTALLMENT_AMOUNT >= 0);
GO

-- Constraints Viajantes

ALTER TABLE TB_TRAVELERS
ADD CONSTRAINT CK_EMAIL CHECK (EMAIL LIKE '%@%.com')
GO

ALTER TABLE TB_TRAVELERS
ADD CONSTRAINT CK_CPF_LENGTH CHECK (LEN(CPF) = 14) -- checa se tem 11 caracteres, mas não ignora o formato
GO
    
ALTER TABLE TB_TRAVELERS
ADD CONSTRAINT CK_CPF_FORMAT CHECK (
    CPF LIKE '[0-9][0-9][0-9].[0-9][0-9][0-9].[0-9][0-9][0-9]-[0-9][0-9]'
)
GO

-- =================================================================
-- CONSTRAINTS PARA TB_PACKAGES
-- =================================================================

-- Constraint para garantir que o preço seja maior ou igual a zero
ALTER TABLE TB_PACKAGES
ADD CONSTRAINT CK_PRICE CHECK (PRICE >= 0)
GO

-- Constraint para garantir que a duração seja maior que zero
ALTER TABLE TB_PACKAGES
ADD CONSTRAINT CK_DURATION CHECK (DURATION > 0)
GO

-- Constraint para garantir que o máximo de pessoas seja maior que zero
ALTER TABLE TB_PACKAGES
ADD CONSTRAINT CK_MAX_PEOPLE CHECK (MAX_PEOPLE > 0)
GO

-- Constraint para garantir que o título não seja vazio ou apenas espaços
ALTER TABLE TB_PACKAGES
ADD CONSTRAINT CK_TITLE_NOT_EMPTY 
CHECK (LEN(LTRIM(RTRIM(TITLE))) > 0)
GO

-- Constraint para garantir que o destino não seja vazio ou apenas espaços
ALTER TABLE TB_PACKAGES
ADD CONSTRAINT CK_DESTINATION_NOT_EMPTY 
CHECK (LEN(LTRIM(RTRIM(DESTINATION))) > 0)
GO

-- Constraint para garantir que a descrição não seja vazia ou apenas espaços
ALTER TABLE TB_PACKAGES
ADD CONSTRAINT CK_DESCRIPTION_NOT_EMPTY 
CHECK (LEN(LTRIM(RTRIM(DESCRIPTION_PACKAGE))) > 0)
GO

-- Constraint para limitar a duração máxima (ex: máximo 365 dias)
ALTER TABLE TB_PACKAGES
ADD CONSTRAINT CK_DURATION_MAX 
CHECK (DURATION <= 365)
GO

-- Constraint para definir um preço máximo razoável (ex: R$ 50.000)
ALTER TABLE TB_PACKAGES
ADD CONSTRAINT CK_PRICE_MAX 
CHECK (PRICE <= 50000.00)
GO

-- Constraint para limitar o número máximo de pessoas por pacote
ALTER TABLE TB_PACKAGES
ADD CONSTRAINT CK_MAX_PEOPLE_LIMIT 
CHECK (MAX_PEOPLE <= 100)
GO

-- =================================================================
-- CONSTRAINTS PARA TB_PACKAGES_DATES
-- =================================================================

-- Constraint para garantir que a data de fim seja posterior à data de início
ALTER TABLE TB_PACKAGES_DATES
ADD CONSTRAINT CK_END_DATE_AFTER_START 
CHECK (END_DATE > START_DATE)
GO

-- Constraint para garantir que a data de início não seja muito no futuro (ex: máximo 2 anos)
ALTER TABLE TB_PACKAGES_DATES
ADD CONSTRAINT CK_START_DATE_NOT_TOO_FUTURE 
CHECK (START_DATE <= DATEADD(YEAR, 2, GETDATE()))
GO

-- Constraint para garantir que a quantidade disponível seja positiva
ALTER TABLE TB_PACKAGES_DATES
ADD CONSTRAINT CK_QTD_AVAILABLE_POSITIVE 
CHECK (QTD_AVAILABLE > 0)
GO

-- Constraint para limitar a quantidade máxima disponível
ALTER TABLE TB_PACKAGES_DATES
ADD CONSTRAINT CK_QTD_AVAILABLE_MAX 
CHECK (QTD_AVAILABLE <= 500)
GO

-- Garante apenas que END_DATE seja pelo menos um dia depois de START_DATE (período positivo).
ALTER TABLE TB_PACKAGES_DATES
ADD CONSTRAINT CK_DATE_DURATION_COMPATIBILITY 
CHECK (DATEDIFF(DAY, START_DATE, END_DATE) >= 1)
GO

-- =================================================================
-- CONSTRAINTS DE UNICIDADE
-- =================================================================

-- Garantir que não existam duas datas iguais para o mesmo pacote
ALTER TABLE TB_PACKAGES_DATES
ADD CONSTRAINT UK_PACKAGE_START_DATE 
UNIQUE (ID_PACKAGE, START_DATE)
GO

-- Garantir que os títulos dos pacotes sejam únicos
ALTER TABLE TB_PACKAGES
ADD CONSTRAINT UK_PACKAGE_TITLE 
UNIQUE (TITLE)
GO
