-- =================================================================
-- TRIGGERS DE UPDATED_AT SIMPLIFICADAS com FLAG DE CONTEXTO (SQL Server)
-- Usa SESSION_CONTEXT para evitar recurs√£o infinita.
-- Atualiza UPDATED_AT sempre que houver UPDATE, exceto se a flag estiver setada.
-- =================================================================

-- TB_USERS
CREATE OR ALTER TRIGGER TRG_UPDATE_USERS_UPDATED_AT
ON TB_USERS
AFTER UPDATE
AS
BEGIN
    SET NOCOUNT ON;

    IF SESSION_CONTEXT(N'UPDATED_AT_USERS_TRIGGERED') IS NULL
    BEGIN
        EXEC sp_set_session_context @key = N'UPDATED_AT_USERS_TRIGGERED', @value = 1;

        UPDATE TB_USERS
        SET UPDATED_AT = GETDATE()
        FROM TB_USERS U INNER JOIN INSERTED I ON U.ID = I.ID;

        EXEC sp_set_session_context @key = N'UPDATED_AT_USERS_TRIGGERED', @value = NULL;
    END
END
GO

-- TB_PAYMENTS
CREATE OR ALTER TRIGGER TRG_UPDATE_PAYMENTS_UPDATED_AT
ON TB_PAYMENTS
AFTER UPDATE
AS
BEGIN
    SET NOCOUNT ON;

    IF SESSION_CONTEXT(N'UPDATED_AT_PAYMENTS_TRIGGERED') IS NULL
    BEGIN
        EXEC sp_set_session_context @key = N'UPDATED_AT_PAYMENTS_TRIGGERED', @value = 1;

        UPDATE TB_PAYMENTS
        SET UPDATED_AT = GETDATE()
        FROM TB_PAYMENTS P INNER JOIN INSERTED I ON P.ID = I.ID;

        EXEC sp_set_session_context @key = N'UPDATED_AT_PAYMENTS_TRIGGERED', @value = NULL;
    END
END
GO

-- TB_RESERVATIONS
CREATE OR ALTER TRIGGER TRG_UPDATE_RESERVATIONS_UPDATED_AT
ON TB_RESERVATIONS
AFTER UPDATE
AS
BEGIN
    SET NOCOUNT ON;

    IF SESSION_CONTEXT(N'UPDATED_AT_RESERVATIONS_TRIGGERED') IS NULL
    BEGIN
        EXEC sp_set_session_context @key = N'UPDATED_AT_RESERVATIONS_TRIGGERED', @value = 1;

        UPDATE TB_RESERVATIONS
        SET UPDATED_AT = GETDATE()
        FROM TB_RESERVATIONS R INNER JOIN INSERTED I ON R.ID = I.ID;

        EXEC sp_set_session_context @key = N'UPDATED_AT_RESERVATIONS_TRIGGERED', @value = NULL;
    END
END
GO

-- TB_RATINGS
CREATE OR ALTER TRIGGER TRG_UPDATE_RATINGS_UPDATED_AT
ON TB_RATINGS
AFTER UPDATE
AS
BEGIN
    SET NOCOUNT ON;

    IF SESSION_CONTEXT(N'UPDATED_AT_RATINGS_TRIGGERED') IS NULL
    BEGIN
        EXEC sp_set_session_context @key = N'UPDATED_AT_RATINGS_TRIGGERED', @value = 1;

        UPDATE TB_RATINGS
        SET UPDATED_AT = GETDATE()
        FROM TB_RATINGS R INNER JOIN INSERTED I ON R.ID = I.ID;

        EXEC sp_set_session_context @key = N'UPDATED_AT_RATINGS_TRIGGERED', @value = NULL;
    END
END
GO

-- TB_MEDIAS
CREATE OR ALTER TRIGGER TRG_UPDATE_MEDIAS_UPDATED_AT
ON TB_MEDIAS
AFTER UPDATE
AS
BEGIN
    SET NOCOUNT ON;

    IF SESSION_CONTEXT(N'UPDATED_AT_MEDIAS_TRIGGERED') IS NULL
    BEGIN
        EXEC sp_set_session_context @key = N'UPDATED_AT_MEDIAS_TRIGGERED', @value = 1;

        UPDATE TB_MEDIAS
        SET UPDATED_AT = GETDATE()
        FROM TB_MEDIAS M INNER JOIN INSERTED I ON M.ID = I.ID;

        EXEC sp_set_session_context @key = N'UPDATED_AT_MEDIAS_TRIGGERED', @value = NULL;
    END
END
GO

-- TB_TRAVELERS
CREATE OR ALTER TRIGGER TRG_UPDATE_TRAVELERS_UPDATED_AT
ON TB_TRAVELERS
AFTER UPDATE
AS
BEGIN
    SET NOCOUNT ON;

    IF SESSION_CONTEXT(N'UPDATED_AT_TRAVELERS_TRIGGERED') IS NULL
    BEGIN
        EXEC sp_set_session_context @key = N'UPDATED_AT_TRAVELERS_TRIGGERED', @value = 1;

        UPDATE TB_TRAVELERS
        SET UPDATED_AT = GETDATE()
        FROM TB_TRAVELERS T INNER JOIN INSERTED I ON T.ID = I.ID;

        EXEC sp_set_session_context @key = N'UPDATED_AT_TRAVELERS_TRIGGERED', @value = NULL;
    END
END
GO

-- TB_PACKAGES_DATES
CREATE OR ALTER TRIGGER TRG_UPDATE_PACKAGES_DATES_UPDATED_AT
ON TB_PACKAGES_DATES
AFTER UPDATE
AS
BEGIN
    SET NOCOUNT ON;

    IF SESSION_CONTEXT(N'UPDATED_AT_PACKAGES_DATES_TRIGGERED') IS NULL
    BEGIN
        EXEC sp_set_session_context @key = N'UPDATED_AT_PACKAGES_DATES_TRIGGERED', @value = 1;

        UPDATE TB_PACKAGES_DATES
        SET UPDATED_AT = GETDATE()
        FROM TB_PACKAGES_DATES PD INNER JOIN INSERTED I ON PD.ID = I.ID;

        EXEC sp_set_session_context @key = N'UPDATED_AT_PACKAGES_DATES_TRIGGERED', @value = NULL;
    END
END
GO

-- TB_PACKAGES
CREATE OR ALTER TRIGGER TRG_UPDATE_PACKAGES_UPDATED_AT
ON TB_PACKAGES
AFTER UPDATE
AS
BEGIN
    SET NOCOUNT ON;

    IF SESSION_CONTEXT(N'UPDATED_AT_PACKAGES_TRIGGERED') IS NULL
    BEGIN
        EXEC sp_set_session_context @key = N'UPDATED_AT_PACKAGES_TRIGGERED', @value = 1;

        UPDATE TB_PACKAGES
        SET UPDATED_AT = GETDATE()
        FROM TB_PACKAGES P INNER JOIN INSERTED I ON P.ID = I.ID;

        EXEC sp_set_session_context @key = N'UPDATED_AT_PACKAGES_TRIGGERED', @value = NULL;
    END
END
GO

-- TB PROMOTIONS
CREATE OR ALTER TRIGGER TRG_UPDATE_PROMOTIONS_UPDATED_AT
ON TB_PROMOTIONS
AFTER UPDATE
AS
BEGIN
    SET NOCOUNT ON;

    IF SESSION_CONTEXT(N'UPDATED_AT_PROMOTIONS_TRIGGERED') IS NULL
    BEGIN
        EXEC sp_set_session_context @key = N'UPDATED_AT_PROMOTIONS_TRIGGERED', @value = 1;

        UPDATE TB_PROMOTIONS
        SET UPDATED_AT = GETDATE()
        FROM TB_PROMOTIONS P INNER JOIN INSERTED I ON P.ID = I.ID;

        EXEC sp_set_session_context @key = N'UPDATED_AT_PROMOTIONS_TRIGGERED', @value = NULL;
    END
END
GO